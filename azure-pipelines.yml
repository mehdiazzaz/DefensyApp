# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python312:
      PYTHON_VERSION: '3.12'
  maxParallel: 2

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'
- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
#- script: |
#    pre-commit run --all-files
#  displayName: 'Pre-commit hooks'
#- script: |
#    pip install safety
#    safety validate policy_file --path .safety-policy.yml
#    safety --key $(SafetyApiKey) --stage cicd scan --policy-file .safety-policy.yml
#  displayName: 'Safety Dependency Check'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'report'
    publishLocation: 'Container'
- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install owasp-dependency-check
    pip install unittest-xml-reporting
    pip install bandit
    bandit -r . -ll -s B605
  displayName: 'Install prerequisites'

- script: |
   pip install bandit
    bandit -r . -ll -s B605 -f xml -o ./TEST-Bandit.xml
    bandit -r . -ll -f html -o '$(Build.ArtifactStagingDirectory)'/TEST-Bandit.html
    bandit -r . -ll -f html -s B605 -o '$(Build.ArtifactStagingDirectory)'/TEST-Bandit.html
  displayName: 'Bandit test'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Sonarcloud_pipeline'
    organization: 'sonarcloud-stagepublic'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'StagePublic_DevSecOps'
    cliProjectName: 'DevSecOps'
    cliSources: '.'


- task: SonarCloudAnalyze@1
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/results.html"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()
